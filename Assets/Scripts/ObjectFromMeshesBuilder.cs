using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;

namespace Assets.Scripts
{
    public class ObjectFromMeshesBuilder
    {
        public GameObject MakeObjectUnitedMeshesWithShiftedUv(MeshFilter[] meshFilters, float scale, Dictionary<int, Vector2> textureOffsets)
        {
            if (textureOffsets == null)
            {
                Debug.LogError("TextureOffsets are null. Maybe it means that you didn't init atlas properties.");
                return null;
            }

            GameObject target = BuildBaseEmptyObject();
            var backupUv = BackupOriginalMeshesUV(meshFilters);
            UpdateUVInOriginalMeshes(meshFilters, scale, textureOffsets);
            CombineMeshesIntoTargetObject(meshFilters, target);
            RestoreOriginalMeshesUV(meshFilters, backupUv);
            return target;
        }

        private GameObject BuildBaseEmptyObject()
        {
            var baseObject = new GameObject("Generated by MakeObjectUnitedMeshesWithShiftedUv");
            baseObject.AddComponent<MeshRenderer>();
            baseObject.AddComponent<MeshFilter>().mesh = new Mesh();
            baseObject.AddComponent<MeshCollider>();
            return baseObject;
        }

        private void CombineMeshesIntoTargetObject(MeshFilter[] meshFilters, GameObject target)
        {
            CombineInstance[] combine = new CombineInstance[meshFilters.Length];
            for (int i = 0; i < meshFilters.Length; i++)
            {
                combine[i].mesh = meshFilters[i].sharedMesh;
                combine[i].transform = meshFilters[i].transform.localToWorldMatrix;
            }
            target.transform.GetComponent<MeshFilter>().mesh.CombineMeshes(combine);
        }

        private void UpdateUVInOriginalMeshes(MeshFilter[] meshFilters, float scale, Dictionary<int, Vector2> textureOffsets)
        {
            foreach (var meshFilter in meshFilters)
            {
                var newUVs = meshFilter.mesh.uv;
                if (meshFilter.GetComponent<Renderer>().material.mainTexture != null)
                {
                    var offset = textureOffsets[meshFilter.gameObject.GetInstanceID()];
                    for (var n = 0; n < newUVs.Length; n++)
                    {
                        newUVs[n] *= scale;
                        newUVs[n] += offset;
                    }
                    meshFilter.mesh.uv = newUVs;
                }
            }
        }

        private Vector2[][] BackupOriginalMeshesUV(MeshFilter[] meshFilters)
        {
            Vector2[][] backup = new Vector2[meshFilters.Length][];
            for (int i = 0; i < meshFilters.Length; i++)
            {
                var meshFilter = meshFilters[i];
                backup[i] = new Vector2[meshFilter.mesh.uv.Length];
                System.Array.Copy(meshFilter.mesh.uv, backup[i], meshFilter.mesh.uv.Length);
            }
            return backup;
        }

        private void RestoreOriginalMeshesUV(MeshFilter[] meshFilters, Vector2[][] backupUVs)
        {
            for (int i = 0; i < meshFilters.Length; i++)
            {
                meshFilters[i].mesh.uv = backupUVs[i];
            }
        }
    }
}